*** linux-2.4.19-stock/net/ipv4/netfilter/ip_nat_core.c	Fri Aug  2 20:39:46 2002
--- linux-2.4.19-vnat/net/ipv4/netfilter/ip_nat_core.c	Tue Aug 13 18:15:06 2002
***************
*** 453,459 ****
                                     may be able to play with ports to
                                     make it unique. */
  				struct ip_nat_range r
! 					= { IP_NAT_RANGE_MAP_IPS, 
  					    tuple->src.ip, tuple->src.ip,
  					    { 0 }, { 0 } };
  				DEBUGP("Trying implicit mapping\n");
--- 453,459 ----
                                     may be able to play with ports to
                                     make it unique. */
  				struct ip_nat_range r
! 					= { IP_NAT_RANGE_MAP_IPS,
  					    tuple->src.ip, tuple->src.ip,
  					    { 0 }, { 0 } };
  				DEBUGP("Trying implicit mapping\n");
***************
*** 514,522 ****
  	struct ip_nat_info *info = &conntrack->nat.info;
  
  	MUST_BE_WRITE_LOCKED(&ip_nat_lock);
  	IP_NF_ASSERT(hooknum == NF_IP_PRE_ROUTING
  		     || hooknum == NF_IP_POST_ROUTING
! 		     || hooknum == NF_IP_LOCAL_OUT);
  	IP_NF_ASSERT(info->num_manips < IP_NAT_MAX_MANIPS);
  
  	/* What we've got will look like inverse of reply. Normally
--- 514,529 ----
  	struct ip_nat_info *info = &conntrack->nat.info;
  
  	MUST_BE_WRITE_LOCKED(&ip_nat_lock);
+ #ifdef CONFIG_IP_NF_NAT_LOCAL
+ 	IP_NF_ASSERT(hooknum == NF_IP_PRE_ROUTING
+ 		     || hooknum == NF_IP_POST_ROUTING
+ 		     || hooknum == NF_IP_LOCAL_OUT
+ 		     || hooknum == NF_IP_LOCAL_IN);
+ #else
  	IP_NF_ASSERT(hooknum == NF_IP_PRE_ROUTING
  		     || hooknum == NF_IP_POST_ROUTING
! 	     || hooknum == NF_IP_LOCAL_OUT);
! #endif
  	IP_NF_ASSERT(info->num_manips < IP_NAT_MAX_MANIPS);
  
  	/* What we've got will look like inverse of reply. Normally
*** linux-2.4.19-stock/net/ipv4/netfilter/ip_nat_rule.c	Fri Aug  2 20:39:46 2002
--- linux-2.4.19-vnat/net/ipv4/netfilter/ip_nat_rule.c	Tue Aug 13 18:15:06 2002
***************
*** 27,33 ****
  #define DEBUGP(format, args...)
  #endif
  
! #define NAT_VALID_HOOKS ((1<<NF_IP_PRE_ROUTING) | (1<<NF_IP_POST_ROUTING) | (1<<NF_IP_LOCAL_OUT))
  
  /* Standard entry. */
  struct ipt_standard
--- 27,37 ----
  #define DEBUGP(format, args...)
  #endif
  
! #ifdef CONFIG_IP_NF_NAT_LOCAL
! #define NAT_VALID_HOOKS ((1<<NF_IP_PRE_ROUTING) | (1<<NF_IP_POST_ROUTING) | (1<<NF_IP_LOCAL_OUT) | (1<<NF_IP_LOCAL_IN))
! #else
! #define NAT_VALID_HOOKS ((1<<NF_IP_PRE_ROUTING) | (1<<NF_IP_POST_ROUTING) ! (1<<NF_IP_LOCAL_OUT))
! #endif
  
  /* Standard entry. */
  struct ipt_standard
***************
*** 51,67 ****
  static struct
  {
  	struct ipt_replace repl;
! 	struct ipt_standard entries[3];
  	struct ipt_error term;
  } nat_initial_table __initdata
! = { { "nat", NAT_VALID_HOOKS, 4,
!       sizeof(struct ipt_standard) * 3 + sizeof(struct ipt_error),
        { [NF_IP_PRE_ROUTING] 0,
  	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard),
! 	[NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2 },
        { [NF_IP_PRE_ROUTING] 0,
  	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard),
! 	[NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2 },
        0, NULL, { } },
      {
  	    /* PRE_ROUTING */
--- 55,93 ----
  static struct
  {
  	struct ipt_replace repl;
! #ifdef CONFIG_IP_NF_NAT_LOCAL
! 	struct ipt_standard entries[4];
! #else
! 	struct ipt_standard entries[2];
! #endif
  	struct ipt_error term;
  } nat_initial_table __initdata
! = { { "nat", NAT_VALID_HOOKS,
! #ifdef CONFIG_IP_NF_NAT_LOCAL
!       5, sizeof(struct ipt_standard) * 4 + sizeof(struct ipt_error),
! #else
!       4, sizeof(struct ipt_standard) * 3 + sizeof(struct ipt_error),
! #endif
        { [NF_IP_PRE_ROUTING] 0,
+ #ifdef CONFIG_IP_NF_NAT_LOCAL
+ 	[NF_IP_LOCAL_IN] sizeof(struct ipt_standard),
+ 	[NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2,
+ 	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard) * 3
+ #else
  	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard),
! [NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2
! #endif
!       },
        { [NF_IP_PRE_ROUTING] 0,
+ #ifdef CONFIG_IP_NF_NAT_LOCAL
+ 	[NF_IP_LOCAL_IN] sizeof(struct ipt_standard),
+ 	[NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2,
+ 	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard) * 3
+ #else
  	[NF_IP_POST_ROUTING] sizeof(struct ipt_standard),
! [NF_IP_LOCAL_OUT] sizeof(struct ipt_standard) * 2
! #endif
!       },
        0, NULL, { } },
      {
  	    /* PRE_ROUTING */
***************
*** 72,78 ****
  		0, { 0, 0 }, { } },
  	      { { { { IPT_ALIGN(sizeof(struct ipt_standard_target)), "" } }, { } },
  		-NF_ACCEPT - 1 } },
! 	    /* POST_ROUTING */
  	    { { { { 0 }, { 0 }, { 0 }, { 0 }, "", "", { 0 }, { 0 }, 0, 0, 0 },
  		0,
  		sizeof(struct ipt_entry),
--- 98,105 ----
  		0, { 0, 0 }, { } },
  	      { { { { IPT_ALIGN(sizeof(struct ipt_standard_target)), "" } }, { } },
  		-NF_ACCEPT - 1 } },
! #ifdef CONFIG_IP_NF_NAT_LOCAL
! 	    /* LOCAL_IN */
  	    { { { { 0 }, { 0 }, { 0 }, { 0 }, "", "", { 0 }, { 0 }, 0, 0, 0 },
  		0,
  		sizeof(struct ipt_entry),
***************
*** 87,92 ****
--- 114,128 ----
  		sizeof(struct ipt_standard),
  		0, { 0, 0 }, { } },
  	      { { { { IPT_ALIGN(sizeof(struct ipt_standard_target)), "" } }, { } },
+ 		-NF_ACCEPT - 1 } },
+ #endif
+ 	    /* POST_ROUTING */
+ 	    { { { { 0 }, { 0 }, { 0 }, { 0 }, "", "", { 0 }, { 0 }, 0, 0, 0 },
+ 		0,
+ 		sizeof(struct ipt_entry),
+ 		sizeof(struct ipt_standard),
+ 		0, { 0, 0 }, { } },
+ 	      { { { { IPT_ALIGN(sizeof(struct ipt_standard_target)), "" } }, { } },
  		-NF_ACCEPT - 1 } }
      },
      /* ERROR */
***************
*** 119,125 ****
--- 155,166 ----
  	struct ip_conntrack *ct;
  	enum ip_conntrack_info ctinfo;
  
+ #ifdef CONFIG_IP_NF_NAT_LOCAL
+ 	IP_NF_ASSERT(hooknum == NF_IP_POST_ROUTING || hooknum == NF_IP_LOCAL_IN);
+ 
+ #else
  	IP_NF_ASSERT(hooknum == NF_IP_POST_ROUTING);
+ #endif
  
  	ct = ip_conntrack_get(*pskb, &ctinfo);
  
***************
*** 183,189 ****
  		return 0;
  	}
  
! 	if (hook_mask & ~(1 << NF_IP_POST_ROUTING)) {
  		DEBUGP("SNAT: hook mask 0x%x bad\n", hook_mask);
  		return 0;
  	}
--- 224,234 ----
  		return 0;
  	}
  
! 	if (hook_mask & ~((1 << NF_IP_POST_ROUTING)
! #ifdef CONFIG_IP_NF_NAT_LOCAL
! 			  | (1 << NF_IP_LOCAL_IN)
! #endif
! 	    )) {
  		DEBUGP("SNAT: hook mask 0x%x bad\n", hook_mask);
  		return 0;
  	}
*** linux-2.4.19-stock/net/ipv4/netfilter/ip_nat_standalone.c	Fri Aug  2 20:39:46 2002
--- linux-2.4.19-vnat/net/ipv4/netfilter/ip_nat_standalone.c	Tue Aug 13 18:15:06 2002
***************
*** 58,64 ****
  	enum ip_nat_manip_type maniptype = HOOK2MANIP(hooknum);
  
  	/* We never see fragments: conntrack defrags on pre-routing
! 	   and local-out, and ip_nat_out protects post-routing. */
  	IP_NF_ASSERT(!((*pskb)->nh.iph->frag_off
  		       & __constant_htons(IP_MF|IP_OFFSET)));
  
--- 58,65 ----
  	enum ip_nat_manip_type maniptype = HOOK2MANIP(hooknum);
  
  	/* We never see fragments: conntrack defrags on pre-routing
! 	   and local-out, and ip_nat_out protects post-routing and
! 	   local-in. */
  	IP_NF_ASSERT(!((*pskb)->nh.iph->frag_off
  		       & __constant_htons(IP_MF|IP_OFFSET)));
  
*** linux-2.4.19-stock/net/ipv4/netfilter/ip_conntrack_standalone.c	Fri Aug  2 20:39:46 2002
--- linux-2.4.19-vnat/net/ipv4/netfilter/ip_conntrack_standalone.c	Tue Aug 13 18:15:06 2002
***************
*** 358,360 ****
--- 358,361 ----
  EXPORT_SYMBOL(ip_conntrack_tuple_taken);
  EXPORT_SYMBOL(ip_ct_gather_frags);
  EXPORT_SYMBOL(ip_conntrack_htable_size);
+ EXPORT_SYMBOL(ip_conntrack_find_get);
*** linux-2.4.19-stock/net/netsyms.c	Fri Aug  2 20:39:46 2002
--- linux-2.4.19-vnat/net/netsyms.c	Tue Aug 27 11:29:30 2002
***************
*** 376,381 ****
--- 376,382 ----
  EXPORT_SYMBOL(tcp_tw_deschedule);
  EXPORT_SYMBOL(tcp_delete_keepalive_timer);
  EXPORT_SYMBOL(tcp_reset_keepalive_timer);
+ EXPORT_SYMBOL(sysctl_tcp_keepalive_time);
  EXPORT_SYMBOL(sysctl_local_port_range);
  EXPORT_SYMBOL(tcp_port_rover);
  EXPORT_SYMBOL(udp_port_rover);
